<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>五分钟理解软件架构模式</title>
    <link href="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/"/>
    <url>/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/</url>
    
    <content type="html"><![CDATA[<h1 id="译文：五分钟理解软件架构模式"><a href="#译文：五分钟理解软件架构模式" class="headerlink" title="译文：五分钟理解软件架构模式"></a>译文：五分钟理解软件架构模式</h1><p>本文是“好文快译”系列的第一篇，先来解释一下为什么想做这个系列。一是为了学习外国工程师的一些经验总结，毕竟计算机方面最新最热的资料还是英文居多；二是在翻译的过程中提高计算机领域的英文能力。纯属自我学习之作，由于英文能力有限，有看不懂的地方可以直接查看原文，提前见谅。</p><blockquote><p>原文地址：<a href="https://orkhanscience.medium.com/software-architecture-patterns-5-mins-read-e9e3c8eb47d2">https://orkhanscience.medium.com/software-architecture-patterns-5-mins-read-e9e3c8eb47d2</a></p></blockquote><p>当一个人进入软件工程师的世界，总有一天他需要知道基本的软件架构模式。当我在编程方面还是个新人的时候，我不知道从哪里获取介绍现有软件架构的资源。它可以是不详细且不复杂，但又非常抽象简洁容易理解。</p><p>这对我来说一直是个问题，直到我发现了Mark Richards的《软件架构模式》一书。现在我想与你分享这本书中最重要的一些部分和架构模式。(如需更多信息，我强烈建议你阅读该书或他的博文）。</p><h2 id="作为软件工程师，为什么你至少要学习基本软件架构"><a href="#作为软件工程师，为什么你至少要学习基本软件架构" class="headerlink" title="作为软件工程师，为什么你至少要学习基本软件架构"></a>作为软件工程师，为什么你至少要学习基本软件架构</h2><p>我相信已经有非常多的文章回答了这个问题，但是我还是会给出几个理由让你来思考。首先，如果你了解软件架构的基本知识，那么你会更容易遵循架构师提出的需求。第二个原因是，了解这些模式可以帮助你在写代码时做出决策。举个例子：如果你的应用是基于事件驱动的微服务，作为软件工程师当你注意到现有服务中的逻辑复杂性和职责增加时，你必须把你的代码解耦到一个独立的服务中。（如果你不理解这部分，就继续读下面的内容，文中对这个模式进行了简要说明）</p><p>Mark Richards的书中描述了5种模式：</p><ul><li>分层架构</li><li>事件驱动架构</li><li>微内核架构（或插件架构）</li><li>微服务架构</li><li>基于空间的架构（或云架构）</li></ul><h2 id="1-分层架构"><a href="#1-分层架构" class="headerlink" title="1.分层架构"></a>1.分层架构</h2><p>分层架构是单体应用中最常用的架构模式。该模式的基本思想是将应用程序的逻辑划分为若干层，每层都封装了特定的职责。例如，持久化层负责你的应用程序与数据库引擎之间的通信。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/layer.png" alt="layer"></p><h2 id="2-事件驱动架构"><a href="#2-事件驱动架构" class="headerlink" title="2.事件驱动架构"></a>2.事件驱动架构</h2><p>该架构模型的主要思想是将应用程序的逻辑解耦到单一用途的的事件处理组件中，这些组件异步地接收和处理事件。该架构是流行的分布式异步架构之一，以高扩展性和适应性闻名。s</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/event.png" alt="event"></p><h2 id="3-微内核架构"><a href="#3-微内核架构" class="headerlink" title="3.微内核架构"></a>3.微内核架构</h2><p>微内核架构，也叫做插件架构，是有两个主要组成部分的设计模式：一个内核系统和插件模块（或扩展）。一个很好的例子是浏览器（内核系统）中你可以安装无尽的扩展（或插件）。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/core.png" alt="core"></p><h2 id="4-微服务架构"><a href="#4-微服务架构" class="headerlink" title="4.微服务架构"></a>4.微服务架构</h2><p>微服务架构由独立部署的服务组成，每个服务有着理想的单一职责。这些服务是相互独立的，如果一个服务出现故障，其他服务不会停止运行。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/microservice.png" alt="microservice"></p><h2 id="5-基于空间的架构"><a href="#5-基于空间的架构" class="headerlink" title="5.基于空间的架构"></a>5.基于空间的架构</h2><p>基于空间的模式背后的主要想法是分布式共享内存，以缓解经常发生在数据库层面的问题。其假设是，通过使用内存数据处理大部分操作，我们可以避免在数据库中进行额外的操作，从而避免将来可能出现的任何问题（例如，如果你的用户活动数据实体发生了变化，你不需要改变一堆代码来持久化并从数据库中检索该数据）。</p><p>基本方法是将应用程序分成处理单元（可以根据需求自动扩大和缩小），数据将在这些单元之间进行复制和处理，而不需要在中央数据库中进行任何持久化处理（尽管在系统故障的情况下会有本地存储）。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/cloud.png" alt="cloud"></p>]]></content>
    
    
    <categories>
      
      <category>好文快译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法整理</title>
    <link href="/2022/01/09/20220207-sorting-algorithm/"/>
    <url>/2022/01/09/20220207-sorting-algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>冒泡排序是入门级的排序算法，其思想就是一边比较挨着的两个位置元素的大小一边两两交换，每次都会将最大值冒泡到最后一位。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(num)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span> - i; j++ &#123;<br>            <span class="hljs-keyword">if</span> num[j] &gt; num[j+<span class="hljs-number">1</span>] &#123;<br>                num[j], num[j+<span class="hljs-number">1</span>] = num[j+<span class="hljs-number">1</span>], num[j]<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>因为冒泡排序直接在要排序的数组上交换，空间复杂度为O(1)。最坏情况下每次比较都会发生交换，时间复杂度为O(n^2)。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>选择排序的思想是：循环数组找到最小值所在的下标，将其交换到首位，然后从第二位开始找剩下元素中的最小值，以此类推处理所有元素。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(num) <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        minPos := i<br>        <span class="hljs-keyword">for</span> j := i+<span class="hljs-number">1</span>; j &lt; n ; j++ &#123;<br>            <span class="hljs-keyword">if</span> num[j] &lt; num[minPos] &#123;<br>                minPos = j<br>            &#125;<br>        &#125;<br>        num[i], num[minPos] = num[minPos], num[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>与冒泡排序相似的是：选择排序也只使用了一个变量来存储最小值下标，因此它的空间复杂度也为O(1)；同样，最坏情况下，需要完整的双重循环将最小值找出，时间复杂度为O(n^2)。<br>但是他们的不同点在于冒泡排序是稳定的，而选择排序在最小值与首位交换的过程中，可能破坏了相同大小元素的顺序，因此选择排序是不稳定的。比如对数组[3,3,1]做升序排序时，把最小值1和首位的3做了交换，就打乱了首位的3与第二位的3的顺序。</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="思想-2"><a href="#思想-2" class="headerlink" title="思想"></a>思想</h3><p>插入排序的思想很简单，就是拿新的元素在已经排好序的数组中找到合适的位置插入进去。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(num)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; n; i++ &#123;<br>        curVal := num[i]<br>        j := i<span class="hljs-number">-1</span><br>        <span class="hljs-keyword">for</span> j &gt;= <span class="hljs-number">0</span> &amp;&amp; num[j] &gt; curVal &#123;<br>            num[j+<span class="hljs-number">1</span>] = num[j]<br>            j--<br>        &#125;<br>        num[j+<span class="hljs-number">1</span>] = curVal<br>    &#125;<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>插入排序同样使用常数级的空间，空间复杂度为O(1)。时间复杂度O(n^2)。插入排序是稳定的排序算法。</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="思想-3"><a href="#思想-3" class="headerlink" title="思想"></a>思想</h3><p>希尔排序由美国数学鄙视Donaid Shell在1959年提出，成为首批将时间复杂度降到O(n^2)以下的算法。<br>希尔算法本质上是对插入排序的一种优化，它的基本思想是：</p><ul><li>将待排序的数组按照一定的间隔分为多个子数组，每组分别进行插入排序。这里按照间隔分组指的不是连续的一段子数组，而是每跳跃一定间隔取一个值组成一组，有点像军训时的报数分组。</li><li>逐渐缩小间隔进行下一轮的排序</li><li>最后一轮时，间隔为1，相当于插入排序。但这时数组已基本有序，所以只需进行少量的交换便可完成。</li></ul><p>希尔排序虽然最终逐渐被快速排序所淘汰，但是它的思想启发出了之后一系列的O(n^2)级以下的排序算法。</p><p>希尔排序为什么能将时间复杂度降低到O(n^2)以下呢？</p><blockquote><p>当我们进行排序时，如果数组中两个数字，前面的数字比后面的数字大，那这两个数组组成一个逆序对。</p><p>排序本质上就是消除逆序对的过程。</p></blockquote><p>对于随机数组，逆序对的数量是 O(n^2) 级的，如果采用“交换相邻元素”的办法来消除逆序对，每次最多只能消除一组逆序对，因此必须执行 O(n^2)级的交换次数，这就是为什么冒泡、插入、选择算法只能到 O(n^2)级的原因。反过来说，基于交换元素的排序算法要想突破 O(n^2)级，必须通过一些比较，交换间隔比较远的元素，使得一次交换能消除一个以上的逆序对。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><br></code></pre></td></tr></table></figure><h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>希尔排序时间复杂度非常难以分析，它的平均复杂度界于 O(n) 和 O(n^2)之间，普遍认为它最好的时间复杂度为 O(n^1.3)。</p><p>希尔排序的空间复杂度为 O(1)，只需要常数级的临时变量。</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="思想-4"><a href="#思想-4" class="headerlink" title="思想"></a>思想</h3><p>介绍堆排序之前我们先给出堆的定义：</p><blockquote><p>堆是一棵完全二叉树。<br>堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆，根节点最小的堆叫做最小堆。</p></blockquote><p>堆排序的思想如下：</p><ul><li>用数组构建成最大堆</li><li>取出根节点的数字，将剩余节点重新构建最大堆，再次取出根节点</li><li>循环往复直至整个堆为空</li></ul><p>堆排序有两个关键的方法，初始化最大堆和调整堆。实现了这两个方法也就基本实现了堆排序。</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MaxHeap <span class="hljs-keyword">struct</span> &#123;<br>    num []<span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    maxHeap := initMaxHeap(num)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(num)<span class="hljs-number">-1</span>; i &gt; <span class="hljs-number">0</span>; i-- &#123;<br>        maxHeap.num[i], maxHeap.num[<span class="hljs-number">0</span>] = maxHeap.num[<span class="hljs-number">0</span>], maxHeap.num[i]<br>        maxHeap.heapifyHeap(<span class="hljs-number">0</span>, i)<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxHeap.num<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMaxHeap</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">MaxHeap</span></span> &#123;<br>    m := MaxHeap&#123;&#125;<br>    m.num = num<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(num)/<span class="hljs-number">2</span><span class="hljs-number">-1</span>; i &gt;=<span class="hljs-number">0</span>; i-- &#123;<br>        m.heapifyHeap(i, <span class="hljs-built_in">len</span>(num))<br>    &#125;<br><span class="hljs-keyword">return</span> m<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *MaxHeap)</span> <span class="hljs-title">heapifyHeap</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>, size <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    maxPos := i<br>    <span class="hljs-keyword">if</span> i*<span class="hljs-number">2</span> &lt; size &amp;&amp; m.num[maxPos] &lt; m.num[i*<span class="hljs-number">2</span>] &#123;<br>        maxPos = i*<span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span> &lt; size &amp;&amp; m.num[maxPos] &lt; m.num[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] &#123;<br>        maxPos = i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> maxPos != i &#123;<br>        m.num[i], m.num[maxPos] = m.num[maxPos], m.num[i]<br>        m.heapifyHeap(maxPos, size)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h3><p>堆排序总的时间复杂度为 O(nlogn), 空间复杂度为 O(1)</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="思想-5"><a href="#思想-5" class="headerlink" title="思想"></a>思想</h3><p>快速排序在大多数情况下比其他几种排序方法效率更高，所以非常受大家欢迎。</p><p>快速排序使用了分治的思想：</p><ul><li>从数组中选取一个数字</li><li>遍历数组，将比选取的数字小的放在它的左边，比选取的数字大的放在它的右边</li><li>以选取数字分割成左右两个数组，递归进行上面的操作<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Array []<span class="hljs-keyword">int</span> <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(num Array)</span> <span class="hljs-title">subQuickSort</span><span class="hljs-params">(start <span class="hljs-keyword">int</span>, end <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> start &gt;= end &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125; <br>    splitPos := start<br>    <span class="hljs-keyword">for</span> i := start+<span class="hljs-number">1</span>; i&lt;= end; i++ &#123;<br>       <span class="hljs-keyword">if</span> num[i] &lt;= num[start] &#123;<br>           splitPos++<br>           num[i], num[splitPos] = num[splitPos], num[i]<br>       &#125;<br>    &#125;<br>    num[start], num[splitPos] = num[splitPos], num[start]<br>    num.subQuickSort(start, splitPos<span class="hljs-number">-1</span>)<br>    num.subQuickSort(splitPos+<span class="hljs-number">1</span>, end)<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">var</span> array Array<br>array = num<br>    array.subQuickSort(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num)<span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> array<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h3>快速排序的平均时间复杂度为 O(nlogn)，最坏的时间复杂度为 O(n^2)，空间复杂度与递归的层数有关，每层递归会生成一些临时变量，所以空间复杂度为 O(logn) ~ O(n)，平均空间复杂度为 O(logn)<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="思想-6"><a href="#思想-6" class="headerlink" title="思想"></a>思想</h3>归并排序同样使用了分治的思想，它的主要思路是：</li><li>每次合并两个有序的数组</li><li>不断拆分，当数组中只有一个元素时，那么它是有序的<h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span>&#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> num<br>    &#125;<br>    mid := <span class="hljs-built_in">len</span>(num)/<span class="hljs-number">2</span><br>    left := mergeSort(num[:mid])<br>    right := mergeSort(num[mid:])<br>    <span class="hljs-keyword">return</span> merge(left, right)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(num1 []<span class="hljs-keyword">int</span>, num2 []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    l1 := <span class="hljs-built_in">len</span>(num1)<br>    l2 := <span class="hljs-built_in">len</span>(num2)<br>    ans := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    i1, i2 := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i1 &lt; l1 &amp;&amp; i2 &lt; l2 &#123;<br>        <span class="hljs-keyword">if</span> num1[i1] &lt; num2[i2] &#123;<br>            ans = <span class="hljs-built_in">append</span>(ans, num1[i1])<br>            i1++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ans = <span class="hljs-built_in">append</span>(ans, num2[i2])<br>            i2++<br>        &#125;<br>    &#125;<br>    ans = <span class="hljs-built_in">append</span>(ans, num1[i1:]...)<br>    ans = <span class="hljs-built_in">append</span>(ans, num2[i2:]...)<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h3><p>归并排序的复杂度比较容易分析，拆分数组的过程中，会将数组拆分 logn 次，每层执行的比较次数都约等于 n 次，所以时间复杂度是 O(nlogn)。空间复杂度是 O(n)，主要占用空间的就是我们在排序前创建的长度为 n 的 result 数组。<br>分析归并的过程可知，归并排序是一种稳定的排序算法<br>由于性能较好，且排序稳定，归并排序应用非常广泛</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
