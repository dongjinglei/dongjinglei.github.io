<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AnotherMQTT立项</title>
    <link href="/2022/12/07/20221207-another-mqtt-start-work/"/>
    <url>/2022/12/07/20221207-another-mqtt-start-work/</url>
    
    <content type="html"><![CDATA[<h1 id="AnotherMQTT立项"><a href="#AnotherMQTT立项" class="headerlink" title="AnotherMQTT立项"></a>AnotherMQTT立项</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>想自己开发一个MQTT客户端的原因有以下两个：  </p><p>1.目前的MQTT客户端，如MQTT.fx、MQTT.x界面卡顿，使用起来很难受。我因为工作原因经常需要调试MQTT的接口，因此一款好用的MQTT客户端对我的帮助非常大，但是目前我没有找到可以满足我的客户端。  </p><p>2.工作的项目目前使用Electron开发客户端。Electron由于体积大、性能等原因受人诟病。新出的Tauri因为使用了系统自带的WebView2做前端和Rust做后端，因为有着很小的安装大小和很快的性能体验。为了提前为项目预研，使用Tauri开发一个简单的客户端工具试用一下。  </p><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>目前的想法是使用Tauri框架+前端React+后端Rust。这个选型没有经过太多的思考，仅仅是想试用一下新东西，一开始先当做玩票性质的项目来搞，要是能提升自己的工作体验就赚到。  </p><h2 id="起名"><a href="#起名" class="headerlink" title="起名"></a>起名</h2><p>来自我非常喜欢的Redis客户端工具Another Redis Desktop Manager，总觉得名字中带着一种无厘头的幽默感。  </p><h2 id="规划功能"><a href="#规划功能" class="headerlink" title="规划功能"></a>规划功能</h2><p>最初的规划功能选择了我最常使用的功能，后面开发完成了也可以继续增加  </p><p>1.支持连接MQTT3.1协议的Broker  </p><p>2.支持Publish和Subscribe功能  </p><p>3.支持JSON格式预览  </p><p>4.支持对订阅到消息内容进行搜索  </p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOLID：面向对象编程的五个基本原则</title>
    <link href="/2022/12/03/20221203-solid/"/>
    <url>/2022/12/03/20221203-solid/</url>
    
    <content type="html"><![CDATA[<p>SOLID是面向对象编程的五个基本原则。SOLID是为了方便记忆，取了五个原则的首字母缩写拼成。</p><h2 id="S-即-Single，代表单一职责原则（Single-Responsibility-Principle）"><a href="#S-即-Single，代表单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="S 即 Single，代表单一职责原则（Single Responsibility Principle）"></a>S 即 Single，代表单一职责原则（Single Responsibility Principle）</h2><h3 id="如何理解单一职责原则"><a href="#如何理解单一职责原则" class="headerlink" title="如何理解单一职责原则"></a>如何理解单一职责原则</h3><p>这个原则的英文描述是这样的：A class or module should have a single responsibility。如果我们把它翻译成中文，那就是：一个类或者模块只负责完成一个职责（或者功能）一个类只负责完成一个职责或者功能。<br>多职责往往会带来职责不清，架构腐化，最终演变成一个“大杂烩”。<br>对我们平时开发时需要思考的是：不要设计大而全的类，要设计粒度小、功能单一的类。单一职责原则是为了实现代码高内聚、低耦合，提高代码的复用性、可读性、可维护性。</p><h3 id="如何判断职责是否足够单一"><a href="#如何判断职责是否足够单一" class="headerlink" title="如何判断职责是否足够单一"></a>如何判断职责是否足够单一</h3><p>在不同的业务场景、不同的需求阶段，对同一个类的职责是否单一，可能会有不同的判断结果。实际上，一些侧面的判断指标更具有指导意义和可执行性，比如，出现下面这些情况就有可能说明这类的设计不满足单一职责原则：<br>类中的代码行数、函数或者属性过多；<br>类依赖的其他类过多，或者依赖类的其他类过多；<br>私有方法过多；<br>比较难给类起一个合适的名字；<br>类中大量的方法都是集中操作类中的某几个属性。</p><h3 id="类的职责是否设计得越单一越好"><a href="#类的职责是否设计得越单一越好" class="headerlink" title="类的职责是否设计得越单一越好"></a>类的职责是否设计得越单一越好</h3><p>单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、低耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。</p><h2 id="O-即-Open，代表开闭原则（Open-Closed-Principle）"><a href="#O-即-Open，代表开闭原则（Open-Closed-Principle）" class="headerlink" title="O 即 Open，代表开闭原则（Open Closed Principle）"></a>O 即 Open，代表开闭原则（Open Closed Principle）</h2><h3 id="如何理解开闭原则"><a href="#如何理解开闭原则" class="headerlink" title="如何理解开闭原则"></a>如何理解开闭原则</h3><p>它的英文描述是：Software entities (modules, classes, functions, etc.) should be open for extension , but closed for modification。我们把它翻译成中文就是：软件实体（模块、类、方法等）应该“对扩展开放、对修改关闭”。添加一个新的功能，应该是通过在已有代码基础上扩展代码（新增模块、类、方法、属性等），而非修改已有代码（修改模块、类、方法、属性等）的方式来完成。</p><h3 id="如何才能做到“对扩展开放、对修改关闭”"><a href="#如何才能做到“对扩展开放、对修改关闭”" class="headerlink" title="如何才能做到“对扩展开放、对修改关闭”"></a>如何才能做到“对扩展开放、对修改关闭”</h3><p>我们要时刻具备扩展意识、抽象意识、封装意识。在写代码的时候，我们要多花点时间思考一下，这段代码未来可能有哪些需求变更，如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，将新的代码灵活地插入到扩展点上。<br>很多设计原则、设计思想、设计模式，都是以提高代码的扩展性为最终目的的。特别是23种经典设计模式，大部分都是为了解决代码的扩展性问题而总结出来的，都是以开闭原则为指导原则的。最常用来提高代码扩展性的方法有：多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式（比如，装饰、策略、模板、职责链、状态）。</p><h2 id="L即Liskov，代表里式替换原则（Liskov-Substitution-Principle）"><a href="#L即Liskov，代表里式替换原则（Liskov-Substitution-Principle）" class="headerlink" title="L即Liskov，代表里式替换原则（Liskov Substitution Principle）"></a>L即Liskov，代表里式替换原则（Liskov Substitution Principle）</h2><h3 id="如何理解里式替换原则"><a href="#如何理解里式替换原则" class="headerlink" title="如何理解里式替换原则"></a>如何理解里式替换原则</h3><p>它的英文描述是：Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it。我们把它翻译成中文就是：子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。<br>里式替换原则是用来指导，继承关系中子类该如何设计的一个原则。理解里式替换原则，最核心的就是理解“design by contract，按照协议来设计”这几个字。父类定义了函数的“约定”（或者叫协议），那子类可以改变函数的内部实现逻辑，但不能改变函数原有的“约定”。这里的约定包括：函数声明要实现的功能；对输入、输出、异常的约定；甚至包括注释中所罗列的任何特殊说明。</p><h2 id="I即Interface，代表接口隔离原则（Interface-Segregation-Principle）"><a href="#I即Interface，代表接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="I即Interface，代表接口隔离原则（Interface Segregation Principle）"></a>I即Interface，代表接口隔离原则（Interface Segregation Principle）</h2><h3 id="如何理解接口隔离原则"><a href="#如何理解接口隔离原则" class="headerlink" title="如何理解接口隔离原则"></a>如何理解接口隔离原则</h3><p>它的英文描述是：Clients should not be forced to depend upon interfaces that they do not use。直译成中文的话就是：客户端不应该被强迫依赖它不需要的接口。其中的“客户端”，可以理解为接口的调用者或者使用者。<br>如果把“接口”理解为一组接口集合，可以是某个微服务的接口，也可以是某个类库的接口等。如果部分接口只被部分调用者使用，我们就需要将这部分接口隔离出来，单独给这部分调用者使用，而不强迫其他调用者也依赖这部分不会被用到的接口。</p><h3 id="接口隔离原则与单一职责原则的区别"><a href="#接口隔离原则与单一职责原则的区别" class="headerlink" title="接口隔离原则与单一职责原则的区别"></a>接口隔离原则与单一职责原则的区别</h3><p>单一职责原则针对的是模块、类、接口的设计。接口隔离原则相对于单一职责原则，一方面更侧重于接口的设计，另一方面它的思考角度也是不同的。接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。</p><h2 id="D即Depency，代表依赖倒置原则"><a href="#D即Depency，代表依赖倒置原则" class="headerlink" title="D即Depency，代表依赖倒置原则"></a>D即Depency，代表依赖倒置原则</h2><h3 id="如何理解依赖倒置原则"><a href="#如何理解依赖倒置原则" class="headerlink" title="如何理解依赖倒置原则"></a>如何理解依赖倒置原则</h3><p>这条原则最原汁原味的英文描述：High-level modules shouldn’t depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn’t depend on details. Details depend on abstractions.我们将它翻译成中文，大概意思就是：高层模块（high-level modules）不要依赖低层模块（low-level）。高层模块和低层模块应该通过抽象（abstractions）来互相依赖。除此之外，抽象（abstractions）不要依赖具体实现细节（details），具体实现细节（details）依赖抽象（abstractions）。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scrum介绍</title>
    <link href="/2022/06/26/20220626-scrum-introduction/"/>
    <url>/2022/06/26/20220626-scrum-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="Scrum介绍"><a href="#Scrum介绍" class="headerlink" title="Scrum介绍"></a>Scrum介绍</h1><h2 id="Scrum是什么"><a href="#Scrum是什么" class="headerlink" title="Scrum是什么"></a>Scrum是什么</h2><p>Scrum是一种通过迭代实现增量软件开发过程，通常用在敏捷软件开发中。在这个框架中，整个开发过程由若干个短的迭代周期组成，一个短的迭代周期称为一个<strong>Sprint</strong>，每个Sprint的建议长度是一至四周。在Scrum中，使用产品Backlog来管理产品的需求，<strong>产品backlog</strong>是一个按照商业价值排序的需求列表，列表条目的体现形式通常为用户故事。Scrum团队总是先开发对客户具有较高价值的需求。在Sprint中，Scrum团队从产品Backlog中挑选最高优先级的需求进行开发。挑选的需求在Sprint计划会议上经过讨论、分析和估算得到相应的任务列表，我们称它为<strong>Sprint backlog</strong>。在每个迭代结束时，Scrum团队将递交潜在可交付的产品增量。 Scrum起源于软件开发项目，但它适用于任何复杂的或是创新性的项目。</p><p><img src="/2022/06/26/20220626-scrum-introduction/flow.png" alt="img"></p><h2 id="Scrum框架-3355"><a href="#Scrum框架-3355" class="headerlink" title="Scrum框架-3355"></a>Scrum框架-3355</h2><h3 id="3个角色"><a href="#3个角色" class="headerlink" title="3个角色"></a>3个角色</h3><ol><li><p>产品负责人</p></li><li><p>Scrum Master</p></li><li><p>Team</p></li></ol><h3 id="3个工件"><a href="#3个工件" class="headerlink" title="3个工件"></a>3个工件</h3><ol><li><p>产品Backlog</p></li><li><p>Sprint Backlog</p></li><li><p>产品增量</p></li></ol><h3 id="5个事件"><a href="#5个事件" class="headerlink" title="5个事件"></a>5个事件</h3><ol><li><p>Sprint</p></li><li><p>Sprint计划会议</p></li><li><p>每日站会</p></li><li><p>Sprint评审会议</p></li><li><p>Sprint回顾会议</p></li></ol><h3 id="5个价值"><a href="#5个价值" class="headerlink" title="5个价值"></a>5个价值</h3><ol><li>承诺</li><li>专注</li><li>开放</li><li>尊重</li><li>勇气</li></ol><h2 id="Scrum理论基础-三大支柱"><a href="#Scrum理论基础-三大支柱" class="headerlink" title="Scrum理论基础-三大支柱"></a>Scrum理论基础-三大支柱</h2><h4 id="透明性（Transparency）"><a href="#透明性（Transparency）" class="headerlink" title="透明性（Transparency）"></a>透明性（Transparency）</h4><p>透明度是指，在软件开发过程的各个环节保持高度的可见性，影响交付成果的各个方面对于参与交付的所有人、管理生产结果的人保持透明。管理生产成果的人不仅要能够看到过程的这些方面，而且必须理解他们看到的内容。也就是说，当某个人在检验一个过程，并确信某一个任务已经完成时，这个完成必须等同于他们对完成的定义。</p><h4 id="检验（Inspection）"><a href="#检验（Inspection）" class="headerlink" title="检验（Inspection）"></a>检验（Inspection）</h4><p>开发过程中的各方面必须做到足够频繁地检验，确保能够及时发现过程中的重大偏差。在确定检验频率时，需要考虑到检验会引起所有过程发生变化。当规定的检验频率超出了过程检验所能容许的程度，那么就会出现问题。幸运的是，软件开发并不会出现这种情况。另一个因素就是检验工作成果人员的技能水平和积极性。</p><h4 id="适应（Adaptation）"><a href="#适应（Adaptation）" class="headerlink" title="适应（Adaptation）"></a>适应（Adaptation）</h4><p>如果检验人员检验的时候发现过程中的一个或多个方面不满足验收标准，并且最终产品是不合格的，那么便需要对过程或是材料进行调整。调整工作必须尽快实施，以减少进一步的偏差。</p><p>Scrum中通过三个活动进行检验和适应：每日例会检验Sprint目标的进展，做出调整，从而优化次日的工作价值；Sprint评审和计划会议检验发布目标的进展，做出调整，从而优化下一个Sprint的工作价值；Sprint回顾会议是用来回顾已经完成的Sprint，并且确定做出什么样的改善可以使接下来的Sprint更加高效、更加令人满意，并且工作更快乐。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
      <tag>敏捷开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的限流算法介绍和选型</title>
    <link href="/2022/04/24/20220424-flow-control/"/>
    <url>/2022/04/24/20220424-flow-control/</url>
    
    <content type="html"><![CDATA[<h1 id="常见的限流算法介绍和选型"><a href="#常见的限流算法介绍和选型" class="headerlink" title="常见的限流算法介绍和选型"></a>常见的限流算法介绍和选型</h1><p>近期接了一个可靠性提升的任务，要求系统能在10倍规格负载下保持不崩溃，仍能处理性能规格的业务。这里需要用到限流（也称流控）的方式去控制流入的请求数量，也借此机会好好梳理了常见的限流算法，并分析了下优缺点，方便后面进行选型。</p><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p>计数器算法又称固定窗口算法，是最简单的限流算法。通过在单位时间内维护的计数器来控制单位时间的最大访问量。</p><p>假设限制每分钟请求量不超过60，设置一个计数器，当请求到达时如果计数器到达阈值，则拒绝请求，否则计数器加1；每分钟重置计数器为0。</p><p>计数器算法的优点是易于实现，且内存占用小，只需要存储当前时间窗口的计数。但是它会有临界问题，在两个时间窗口的交界处，瞬时流量可能达到2n。<br><img src="/2022/04/24/20220424-flow-control/count" alt="count.png"></p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>为了应对瞬时流量，我们基于计数器算法的基础上，将固定窗口进一步划分为多个格子，这样窗口每次向后移动一小格，然后计算当前窗口内的请求总数是否超过阈值。</p><p>[<img src="/2022/04/24/20220424-flow-control/sliding-window.png" alt="sliding-window.png"></p><p>滑动窗口解决了计数器的舒适流量高峰的问题，但是当窗口流量高于阈值时，多余的流量会被丢弃。我们实际应用中更希望可以削峰平谷，使流量可以平滑达到系统，显然滑动窗口不能帮我们做到这一点。</p><h2 id="漏桶"><a href="#漏桶" class="headerlink" title="漏桶"></a>漏桶</h2><p>漏桶算法（Leaky Bucket），请求就像水一样以任意速度注入漏桶，而桶会按照固定的速率将水漏掉；当注入速度持续大于漏出的速度时，漏桶会变满，此时新进入的请求将会被丢弃。<strong>限流</strong>和<strong>整形</strong>是漏桶算法的两个核心能力<br><img src="/2022/04/24/20220424-flow-control/leaky-bucket.png" alt="leaky-bucket"><br>桶算法存在目的主要是用来<strong>平滑突发的流量</strong>，提供一种机制来确保网络中的突发流量被整合成平滑稳定的额流量。</p><p>不过由于漏桶对流量的控制过于严格，在有些场景下<strong>不能充分使用系统资源</strong>，因为漏桶的漏出速率是固定的，即使在某一时刻下游能够处理更大的流量，漏桶也不允许突发流量通过。</p><h2 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h2><p>怎样才能够在限制流量速率的前提下，又能够允许突发流量呢？令牌桶算法就可以做到。令牌桶算法是以恒定速率向令牌桶发送令牌，请求到达时，尝试从令牌桶中拿令牌，只有拿到令牌才能够放行，否则将会被拒绝。<br><img src="/2022/04/24/20220424-flow-control/token-bucket.png" alt="token-bucket.png"><br>令牌桶具有以下特点：</p><ol><li>以恒定的速率发放令牌，假设限流速率为v/s，则表示每1/v秒发放一个令牌</li><li>假设令牌桶容量是b，如果令牌桶已满，则新的令牌会被丢弃</li><li>请求能够通过限流器的前提是令牌桶中有令牌</li></ol><p>令牌桶算法中值得关注的参数有两个，即限流速率v/s，和令牌桶容量b；速率a表示限流器一般情况下的限流速率，而b则是burst的简写，表示限流器允许的最大突发流量。</p><p>比如b=10，当令牌桶满的时候有10个可用令牌，此时允许10个请求同时通过限流器（<strong>允许流量一定程度的突发</strong>），这10个请求瞬间消耗完令牌后，后续的流量只能按照速率r通过限流器。</p><h2 id="几种算法的比较"><a href="#几种算法的比较" class="headerlink" title="几种算法的比较"></a>几种算法的比较</h2><table><thead><tr><th>算法</th><th>参数</th><th>时空复杂度</th><th>是否可以限制突发流量</th><th>平滑限流</th><th>分布式场景下实现难度</th></tr></thead><tbody><tr><td>计数器</td><td>时间窗口T、访问量C</td><td>时间复杂度O(1)<br>空间复杂度O(1)</td><td>否</td><td>否</td><td>简单</td></tr><tr><td>滑动窗口</td><td>时间窗口T、访问量C、每次移动长度t</td><td>时间复杂度O(T/t)<br>空间复杂度O(T/t)</td><td>是</td><td>否</td><td>中等</td></tr><tr><td>漏桶</td><td>队列长度L、流出速率v</td><td>时间复杂度O(1)<br>空间复杂度O(L)</td><td>是</td><td>是</td><td>困难</td></tr><tr><td>令牌桶</td><td>队列长度L、令牌产生速率v</td><td>时间复杂度O(1)<br>空间复杂度O(L)</td><td>是</td><td>是</td><td>困难</td></tr></tbody></table><p>以上算法其实都需要我们预先知道系统可以接受的访问速率，为此我们需要先做一下压测。但是有的场景，系统可以接受的访问速率是变化的，随着系统所在机器的CPU、内存大小不同，此时还使用固定的流控限制就不太合适了。所以我们需要一种自适应的流控策略。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流控</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五年回顾：对程序员职业成长的思考</title>
    <link href="/2022/04/10/20220402-relection-on-career-growth/"/>
    <url>/2022/04/10/20220402-relection-on-career-growth/</url>
    
    <content type="html"><![CDATA[<p>一转眼已经来到了工作的第五个年头，感觉就像昨天才毕业一样。时间过得非常快，又说不清楚这些时间都做了什么。</p><p>工作这么久了好像一直沉迷到工作内容中，很少停下来思考一下。现在突然有一段空闲时间，回过头看这五年，刚入职的时候感觉成长很快，什么知识对我来说都是新鲜的。那时候手上的工作多到每天要加班到十一二点，但是一点都没感觉辛苦。甚至在项目最紧张的时候，一周能通宵三个晚上。但是渐渐的，工作内容变成了对之前技能的重复，时间也大量花在与人沟通上面。成长的速度渐渐慢了下来，我知道我仿佛是遇到了修真小说中所说的瓶颈，是需要做出一些改变了。我开始看一些书，听一些技术牛人的分享，想知道他们是怎么推动自己不断成长的，我总结为以下几个方面。</p><p><img src="/2022/04/10/20220402-relection-on-career-growth/growth.png" alt="growth"></p><h2 id="提升认知"><a href="#提升认知" class="headerlink" title="提升认知"></a>提升认知</h2><p>认知是个体认识客观世界的信息加工活动，简单说是我们对世界的感知、观念和态度。很多时候我们事情做不好其实是认知不够，我对事情的理解不够深入和有高度，结果自然就与别人产生差异。</p><p><strong>1.提升认知最好的方法就是读书。</strong>去年我读到了“微习惯”这本书，这本书是我毕业后对我帮助最大的一本书，它帮助我养成了很多小的提升好习惯。培养一个习惯很难，因为坚持是需要消耗人的意志力的。但是如果我们把目标设立的足够小，小到毫不费力，那么培养这个习惯就会变得很容易。我给自己制定下了以下四个微习惯：</p><ul><li>每天读或者听书超过10分钟</li><li>每天刷一道算法题</li><li>每天写十个字</li><li>每天做一个俯卧撑</li></ul><p>这些微习惯我坚持至今，让我有每天进步一点点，没有荒废每一天的愉悦感。同时这些微习惯只是帮我们促使自己动起来，实际上很多次我都会读书30分钟或做20个俯卧撑，远超过微习惯设立的目标。所以你看，一本书就可以对我有这么大的帮助，多读书总会遇到你适合的成长方法。</p><p><strong>2.跟随技术圈大佬的步伐。</strong><br>21年开始我开始关注一些技术圈的牛人。我本人主力语言是Go，然后关注了曹大、欧神等人的博客，然后又接触到了Go夜读社区。社区会定期做Go相关的技术分享。通过这些分享，我扩展了我的知识面，经常可以把别人分享的内容和技术结合到工作中去。也知道了技术圈比较前沿的技术和发展方向，也算是不落后时代太远。</p><p><strong>3.形成自己的知识体系</strong></p><p>这一点就比较厉害了，我观察技术比较强的人。他们大多数形成了自己的知识体系，解决一个问题时有很多思路，多个思路之间互相推动，往往问题就手到擒来。还有就是选择方向，知识体系围绕着一个主题来打造。吾生也有涯，而知也无涯。人的精力是很有限的，选择计算机软件领域的一个细分领域去投资，可以是前端、操作系统、数据库、分布式等等。不要追着新概念走，近几年我看过太多红一阵就又没有声音的技术，尽量选择那些经典，持久的领域。因为后面出了多少新东西，大部分也是基于之前这些老事物的包装。当你把基础打好后，再去挑战一两个新兴技术也无妨。</p><h2 id="提升个人品牌"><a href="#提升个人品牌" class="headerlink" title="提升个人品牌"></a>提升个人品牌</h2><p>这里说的提升个人品牌等同于提升影响力。在互联网、项目组内提升自己的影响力，一个人影响力越大，那么他在项目组中对技术的决策就更有力，更让人信服。</p><p><strong>1.坚持写个人博客</strong></p><p>个人博客是一个很好的输出平台，在个人博客上发表文章来传播知识。在试图教会他人同时，自己对这些知识也做了一次巩固，并且还能锻炼了自己的表达能力。将复杂的事物简单化解释，让大家都能更容易接受，体现了一个人的理解和表达水平，这方面做得比较好的是阮一峰老师。个人博客一定要开放评论功能，允许你的读者与你交流，帮助你发现错误，否则个人博客可能变成了自嗨。</p><p><strong>2.有时间可以搭建起自己的公众号</strong></p><p>相比于个人博客，公众号更符合现在的时代。在公众号上，你的内容会收获更多的流量，好的文章也可以很方便被别人转发推荐。所以有时间的话，开始搭建你的公众号平台。</p><p><strong>3.参与开源项目</strong></p><p>希望在新的一年，能深度参与一个开源项目，体验开源项目的开发流程，锻炼自己的代码能力。</p><p><strong>4.乐于助人</strong></p><p>在平时工作中，乐于助人，帮助别人解决问题。我发现很多同事可能是因为工作任务多，压力大，面对别人的求助态度很不好。我想做一个nice的人，能在压力山大的工作氛围中给予一点温暖，这可能就是我能做到的微薄的事吧。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业成长</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些有趣的软件开发定律</title>
    <link href="/2022/04/01/20220401-software-develop-laws/"/>
    <url>/2022/04/01/20220401-software-develop-laws/</url>
    
    <content type="html"><![CDATA[<p>作为程序员在开发软件时经常听到一些有趣的定律，在真的经历过一些项目后，才感觉这些定律真的很经典，时间过了这么久也都适用，在此总结记录下来。</p><h2 id="康威定律-Conway’s-Law"><a href="#康威定律-Conway’s-Law" class="headerlink" title="康威定律 Conway’s Law"></a>康威定律 Conway’s Law</h2><blockquote><p>软件系统的架构，反映了公司的组织结构。</p></blockquote><p>这个定律说，公司的行政组织架构，会体现在软件架构里。为什么会这样呢？主要是因为一个组件内的设计与开发活动需要频繁的沟通，而跨部门交流会比较困难，所以设计开发人员倾向于在部门内的组件完成一个功能，只有实现不了才会想向其他组件提需求。于是逐渐的软件架构就会变得与公司组织结构一致。</p><h2 id="安迪-比尔定律-Andy-and-Bill’s-Law"><a href="#安迪-比尔定律-Andy-and-Bill’s-Law" class="headerlink" title="安迪-比尔定律 Andy and Bill’s Law"></a>安迪-比尔定律 Andy and Bill’s Law</h2><blockquote><p>硬件升级提高的计算能力，总会被软件升级耗尽。</p></blockquote><p>这条定律来自于1990年计算机会议上的一句小笑话。当时安迪是英特尔的CEO，比尔盖茨是微软的CEO。”安迪给的，比尔都会拿走”。英特尔芯片升级提高的计算能力，最终都会被window操作系统耗尽。</p><p>这条定律放到现在智能手机上也依然适用，尽管我们已经每1~2年更换最新最先进硬件的手机，但是运行一段时间后依然会觉得卡顿。这其实是因为我们升级了手机操作系统和应用软件，这些软件倾向于消耗更多的资源，提供更好的体验。软件升级带来的手机系统卡顿又会推动我们不断更新自己的设备，对硬件厂商其实也是有利的。</p><p>但是随着硬件器件的尺寸越来越接近物理极限，硬件计算能力的提升已经出现了放缓的趋势。而另一方面随着互联网的发展，需要计算的数据越来越多。对于我们软件开发人员来说，还是应该在开发过程中时刻关注代码的性能，不能像以前那样“任性”的浪费了。</p><h2 id="墨菲定律-Murphy’s-Law"><a href="#墨菲定律-Murphy’s-Law" class="headerlink" title="墨菲定律 Murphy’s Law"></a>墨菲定律 Murphy’s Law</h2><blockquote><p>如果事情可能出错，它就会出错。</p></blockquote><p>这可能是最著名的定律之一了。对这条定律我的感悟有以下几点：</p><p>1.尽量用自动化代替手工操作。人是会犯错的，在整套系统中，最不可靠、容易攻破的可能就是人。所以我们要尽量用机器自动化操作去替换手工操作。并不是说机器不会犯错，而是概率比手工要小。</p><p>2.在做软件时要防御性编程原则，尽量减少用户可能的犯错。</p><h2 id="霍夫施塔特定律-Hofstadter’s-Law"><a href="#霍夫施塔特定律-Hofstadter’s-Law" class="headerlink" title="霍夫施塔特定律 Hofstadter’s Law"></a>霍夫施塔特定律 Hofstadter’s Law</h2><blockquote><p>即使你考虑到了霍夫施塔特定律，项目的实际完成时间总是比预期的要长。</p></blockquote><p>定律中自带递归，很有程序员的特点。项目的具体开发过程总是会出现一些意外的问题，可能是技术、人力甚至是大环境的改变。所以我们在预估工作量时，永远无法精确估计工作量。所以总是要考虑留一些余量。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件开发定律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次线上CPU占用超过100%问题定位</title>
    <link href="/2022/03/30/20220330-record-to-slove-the-problem-CPU-exceeds-100/"/>
    <url>/2022/03/30/20220330-record-to-slove-the-problem-CPU-exceeds-100/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次线上CPU占用超过100-问题定位"><a href="#记一次线上CPU占用超过100-问题定位" class="headerlink" title="记一次线上CPU占用超过100%问题定位"></a>记一次线上CPU占用超过100%问题定位</h1><p>前段时间测试发现，在线上环境服务部署使用一段时间后，会有一些接口调用没有响应。在线上环境服务器上执行top命令，我的乖乖，CPU占用超过了200%。</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">top</span> - <span class="hljs-number">15</span>:<span class="hljs-number">07</span>:<span class="hljs-number">37</span> up <span class="hljs-number">20</span> days, <span class="hljs-number">4</span>:<span class="hljs-number">40</span>,  <span class="hljs-number">2</span> user,  load average: <span class="hljs-number">3</span>.<span class="hljs-number">19</span>, <span class="hljs-number">3</span>.<span class="hljs-number">44</span>, <span class="hljs-number">3</span>.<span class="hljs-number">71</span><br><span class="hljs-attribute">Tasks</span>: <span class="hljs-number">215</span> total,   <span class="hljs-number">1</span> running, <span class="hljs-number">214</span> sleeping,   <span class="hljs-number">0</span> stopped,   <span class="hljs-number">0</span> zombie<br><span class="hljs-attribute">Cpu</span>(s): <span class="hljs-number">67</span>.<span class="hljs-number">3</span>%us,  <span class="hljs-number">4</span>.<span class="hljs-number">5</span>%sy,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%ni, <span class="hljs-number">27</span>.<span class="hljs-number">8</span>%id,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%wa,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%hi,  <span class="hljs-number">0</span>.<span class="hljs-number">4</span>%si,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%st<br><span class="hljs-attribute">Mem</span>:  <span class="hljs-number">1790</span>.<span class="hljs-number">0</span> total,      <span class="hljs-number">465</span>.<span class="hljs-number">2</span> used,    <span class="hljs-number">717</span>.<span class="hljs-number">6</span> free,    <span class="hljs-number">607</span>.<span class="hljs-number">3</span> buffers<br><span class="hljs-attribute">Swap</span>:    <span class="hljs-number">0</span>.<span class="hljs-number">0</span> total,        <span class="hljs-number">0</span>.<span class="hljs-number">0</span> used,      <span class="hljs-number">0</span>.<span class="hljs-number">0</span> free,      <span class="hljs-number">0</span>.<span class="hljs-number">0</span> cached<br><br><span class="hljs-attribute">PID</span>     USER      PR    NI   VIRT    RES     SHR    S   %CPU    %MEM        TIME+   COMMAND<br><span class="hljs-attribute">3997</span>    <span class="hljs-number">2001</span>      <span class="hljs-number">20</span>     <span class="hljs-number">0</span>  <span class="hljs-number">1229036</span> <span class="hljs-number">26988</span>   <span class="hljs-number">5236</span>    S  <span class="hljs-number">237</span>.<span class="hljs-number">2</span>     <span class="hljs-number">1</span>.<span class="hljs-number">5</span>      <span class="hljs-number">6461</span>:<span class="hljs-number">00</span>   xxxx<br><span class="hljs-attribute">1875</span>    <span class="hljs-number">1880</span>      <span class="hljs-number">20</span>     <span class="hljs-number">0</span>   <span class="hljs-number">929036</span> <span class="hljs-number">152960</span>  <span class="hljs-number">2548</span>    S   <span class="hljs-number">19</span>.<span class="hljs-number">2</span>     <span class="hljs-number">8</span>.<span class="hljs-number">3</span>       <span class="hljs-number">534</span>:<span class="hljs-number">35</span>   .....<br></code></pre></td></tr></table></figure><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>一般来说，CPU、内存等系统资源的飙升这类问题的定位，我们需要借助一些工具分析profile，锁定占用CPU、内存资源高的函数，好进一步定位。</p><p>xxxxx(隐去业务名)是Go语言开发的代码，Go中自带了pprof工具，用于生成和分析profile文件。</p><p><strong>1.开启profile采集</strong></p><p>我们在main.go的import中加入http和pprof包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    _ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>然后在main函数的最后，启动http服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">http.ListenAndServe(<span class="hljs-string">&quot;0.0.0.0:6060&quot;</span>, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><p>重新打包后替换到测试环境上</p><p><strong>2.采集profile文件</strong></p><p>在本地命令行中执行以下命令，可以采集到60s的profile文件。注意localhost需要替换为服务所在的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60<br></code></pre></td></tr></table></figure><p><strong>3.分析profile文件</strong></p><p>执行top命令，查看耗时最长的函数</p><p><img src="/2022/03/30/20220330-record-to-slove-the-problem-CPU-exceeds-100/pprof-top.png" alt="pprof-top"></p><p>或者执行以下命令，可以从浏览器中查看火焰图，可以比较清晰的看出函数上下层调用关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go tool pprof -http=:1234 http://localhost:6060/debug/pprof/profile<br></code></pre></td></tr></table></figure><p><img src="/2022/03/30/20220330-record-to-slove-the-problem-CPU-exceeds-100/flame.png" alt="flame"></p><p>从top函数上分析，累计耗时最长的函数是runtime.siftdownTimer。经过查询可以获知，此函数使用在Go的定时器类型中，用于调整Go运行时维护的定时器事件最小堆的顺序。所以此问题最有可能是定时器使用时出现了泄露，没有关闭用完的定时器。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>经过排查，有一个接口代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">...业务代码<br>ind := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> time.Tick(<span class="hljs-number">50</span> * time.Millsecond) &#123;<br>    ind += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> ind &gt;= <span class="hljs-built_in">len</span> &#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br>    ...业务代码<br>&#125;<br>...业务代码<br></code></pre></td></tr></table></figure><p>很明显问题就发生在这里。</p><p>Go的定时器有以下两种声明方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 第一种：显式声明定时器</span><br>tick := time.NewTicker(duration)<br><span class="hljs-keyword">defer</span> tick.Stop()<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> tick.C &#123;<br>    ...业务代码<br>&#125;<br><span class="hljs-comment">// 第二种：匿名定时器</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> time.Tick(duration) &#123;<br>    ...业务代码<br>&#125;<br></code></pre></td></tr></table></figure><p>两种定时器的区别在于，第一种会获取声明的定时器对象的引用，可用于使用完成后关闭。第二种则会申明匿名的定时器，生命周期与服务相同，直到服务终止时才会关闭。</p><p>所以第二种定时器应用于明确的业务上不需要终止，一直运行的场景。而上述代码中定时器有明确的退出条件即ind &gt;= len，所以应该用第一种方式声明。</p><p>修改后代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">...业务代码<br>ind := <span class="hljs-number">0</span><br>tick := time.NewTicker(<span class="hljs-number">50</span> * time.Millsecond)<br><span class="hljs-keyword">defer</span> tick.Stop()<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> tick.C &#123;<br>    ind += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> ind &gt;= <span class="hljs-built_in">len</span> &#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br>    ...业务代码<br>&#125;<br>...业务代码<br></code></pre></td></tr></table></figure><p>重新部署服务，问题解决，CPU保持在10%左右。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go语言</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算</title>
    <link href="/2022/03/27/20220327-bitwise/"/>
    <url>/2022/03/27/20220327-bitwise/</url>
    
    <content type="html"><![CDATA[<h2 id="1-位运算简介"><a href="#1-位运算简介" class="headerlink" title="1.位运算简介"></a>1.位运算简介</h2><p>我们都知道在计算机中通常采用二进制存储数据。而位运算就是直接对内存中的二进制进行运算。由于位运算不需要先将数据转换成十进制，因此位运算十分高效。我们经常会利用位运算的这一特点优化程序的执行速度。</p><h2 id="2-常用的位运算操作"><a href="#2-常用的位运算操作" class="headerlink" title="2.常用的位运算操作"></a>2.常用的位运算操作</h2><h3 id="2-1-与-amp"><a href="#2-1-与-amp" class="headerlink" title="2.1 与 &amp;"></a>2.1 与 &amp;</h3><p>两个位都为1时，结果才为1</p><p>与运算常用于：</p><p>1）清零</p><p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p><p>2）取一个数的指定位</p><p>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p><p>3）判断奇偶</p><p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a &amp; 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。</p><h3 id="2-2-或"><a href="#2-2-或" class="headerlink" title="2.2 或|"></a>2.2 或|</h3><p>两个位都为0时，结果才为0</p><p>或运算常用于：</p><p>1）常用来对一个数据的某些位设置为1</p><p>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。</p><h3 id="2-3-异或"><a href="#2-3-异或" class="headerlink" title="2.3 异或 ^"></a>2.3 异或 ^</h3><p>两个位相同为0，相异为1</p><p>异或运算常用于：</p><p>1）翻转指定位</p><p>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p><p>2）与0相异或值不变</p><p>例如：1010 1110 ^ 0000 0000 = 1010 1110</p><h3 id="2-4-左移位-lt-lt-右移位-gt-gt"><a href="#2-4-左移位-lt-lt-右移位-gt-gt" class="headerlink" title="2.4 左移位&lt;&lt;  右移位&gt;&gt;"></a>2.4 左移位&lt;&lt;  右移位&gt;&gt;</h3><h3 id="2-5-取反"><a href="#2-5-取反" class="headerlink" title="2.5 取反 ~"></a>2.5 取反 ~</h3><p>0变1，1变0</p><h2 id="3-常用的位运算技巧"><a href="#3-常用的位运算技巧" class="headerlink" title="3.常用的位运算技巧"></a>3.常用的位运算技巧</h2><h3 id="3-1消除二进制最后一个1"><a href="#3-1消除二进制最后一个1" class="headerlink" title="3.1消除二进制最后一个1"></a>3.1消除二进制最后一个1</h3><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs go">num &amp; (num - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>num - 1会将最后一个1的位置置为0，并将最后一个1后面的0全部置为1，与原本的num进行&amp;运算就会消掉最后一个1。</p><p>结合下面一个例子来看会更清晰：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">num           = <span class="hljs-number">010010100</span><br>num<span class="hljs-number">-1</span>         = <span class="hljs-number">010010011</span><br>num &amp; (num<span class="hljs-number">-1</span>) = <span class="hljs-number">010010000</span><br></code></pre></td></tr></table></figure><h3 id="3-2获取二进制最后一个1的位置"><a href="#3-2获取二进制最后一个1的位置" class="headerlink" title="3.2获取二进制最后一个1的位置"></a>3.2获取二进制最后一个1的位置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">num &amp; -num<br></code></pre></td></tr></table></figure><p>二进制的负数等于原码的补码加一，补码即为原码取反，与原本的num进行&amp;运算就会只保留最后一个1</p><p>还是以num为010010100来看这个过程：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">num</span>          = <span class="hljs-number">010010100</span><br>-<span class="hljs-built_in">num</span>         = <span class="hljs-number">101101100</span><br><span class="hljs-built_in">num</span> &amp; (-<span class="hljs-built_in">num</span>) = <span class="hljs-number">000000100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MQTT会话机制</title>
    <link href="/2022/03/13/20220313-mqtt-session/"/>
    <url>/2022/03/13/20220313-mqtt-session/</url>
    
    <content type="html"><![CDATA[<h1 id="MQTT会话机制"><a href="#MQTT会话机制" class="headerlink" title="MQTT会话机制"></a>MQTT会话机制</h1><h2 id="什么是会话"><a href="#什么是会话" class="headerlink" title="什么是会话"></a>什么是会话</h2><p>会话（Session）在系统设计中很常见，是客户端与服务端进行一次通讯的过程。这里的一次通讯指的并不是一次建立连接断开连接的过程，而是业务上完成通讯的过程，一个会话可能跨多个网路连接而存在。通过存储已建立的会话，服务器可以确定每次请求关联的客户端是否是同一个。</p><h2 id="什么是会话状态？"><a href="#什么是会话状态？" class="headerlink" title="什么是会话状态？"></a>什么是会话状态？</h2><p>MQTT要求客户端与服务端在会话有效期内存储一系列与客户端标识相关联的状态，称之为会话状态。</p><p>客户端需要存储以下会话状态：</p><ul><li>已发送给服务端，但是还没有完成确认的 QoS 1 与 QoS 2 消息。</li><li>从服务端收到的，但是还没有完成确认的 QoS 2 消息。</li></ul><p>服务端需要存储以下会话状态：</p><ul><li>会话是否存在，即使会话状态其余部分为空。</li><li>客户端订阅信息，包括任何订阅标识符。</li><li>已发送给客户端，但是还没有完成确认的 QoS 1 与 QoS 2 消息。</li><li>等待传输给客户端的 QoS 0 消息（可选），QoS 1 与 QoS 2 消息。</li><li>从客户端收到的，但是还没有完成确认的 QoS 2 消息，遗嘱消息和遗嘱延时间隔。</li><li>会话过期时间。</li></ul><h2 id="如何设置会话保持"><a href="#如何设置会话保持" class="headerlink" title="如何设置会话保持"></a>如何设置会话保持</h2><p>MQTT v3.1.1版本只有一个Clean Session字段，由客户端在连接时指定：</p><p>为 1 表示客户端和服务器必须丢弃任何先前的会话并创建一个新的会话，且这个会话的生命周期与网络连接保持一致；</p><p>为 0 则表示服务端必须使用与 Client ID 关联的会话来恢复与客户端的通信（除非会话不存在），客户端和服务器在断开连接后必须存储会话的状态。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>物联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号和信号量</title>
    <link href="/2022/02/28/20220228-signal-and-semaphore/"/>
    <url>/2022/02/28/20220228-signal-and-semaphore/</url>
    
    <content type="html"><![CDATA[<h1 id="信号和信号量"><a href="#信号和信号量" class="headerlink" title="信号和信号量"></a>信号和信号量</h1><p>信号与信号量，经常有人搞混这两个词的含义，其实这是因为他们的中文翻译太接近了。如果使用英文表达信号（Signal）和信号量（Semaphone），想必就没有人会搞混了。</p><h2 id="信号（Signal）"><a href="#信号（Signal）" class="headerlink" title="信号（Signal）"></a>信号（Signal）</h2><p>信号（Singal）是Unix、类Unix以及其他兼容POSIX操作系统中进程间通信的一种有限制的方式，是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程时，操作系统会终端进程正常的控制流程，此时任何非原子操作都会被中断。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。</p><p>下面是常见的信号量和事件描述</p><table><thead><tr><th>序号</th><th>名称</th><th>默认行为</th><th>相应事件</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>终止</td><td>终端线挂断，现在操作系统，该信号通常意味着使用的虚拟终端已经被关闭。nohup命令用于无视该信号</td></tr><tr><td>2</td><td>SIGINT</td><td>终止interrupt</td><td>来自键盘的中断，Ctrl-C</td></tr><tr><td>3</td><td>SIGQUIT</td><td>终止</td><td>来自键盘的退出，Ctrl-\</td></tr><tr><td>4</td><td>SIGILL</td><td>终止</td><td>非法指令</td></tr><tr><td>5</td><td>SIGTRAP</td><td>终止并转储存储器</td><td>跟踪陷阱</td></tr><tr><td>6</td><td>SIGABRT</td><td>终止并转储存储器</td><td>来自abort函数的终止信号</td></tr><tr><td>7</td><td>SIGBUS</td><td>终止</td><td>总线错误</td></tr><tr><td>8</td><td>SIGFPE</td><td>终止并转储存储器</td><td>浮点异常</td></tr><tr><td>9</td><td>SIGKILL</td><td>终止</td><td>杀死进程</td></tr><tr><td>15</td><td>SIGTERM</td><td>终止</td><td>软件终止信号</td></tr><tr><td>20</td><td>SIGTSTP</td><td>挂起直到下一个SIGCONT</td><td>来自终端的挂起信号。会导致进程挂起。SIGTSTP信号的产生通常是由于用户按下Ctrl+Z。</td></tr></tbody></table><h2 id="信号量（Semaphone）"><a href="#信号量（Semaphone）" class="headerlink" title="信号量（Semaphone）"></a>信号量（Semaphone）</h2><p>信号量（Semaphone）又被称为信号标或信号灯，是操作系统中用于解决多个程序访问同一个共享资源引发竞争问题的机制。信号量本身其实是一个原子操作的特殊变量，如果变量只能取0和1，这种我们叫做二进制信号量。而可以取多个回合正整数的信号量被称为计数信号量或通用信号量。</p><p>计数信号量具备两种操作动作，称为P（<code>wait()</code>）V（<code>signal()</code>）：</p><p>当进程企图进入临界区段时，需要先执行P（<code>wait()</code>），将信号量S的值减少。当信号量S减为负值时，进程会挂起不能继续执行。当信号量不为负值时，可以进入临界区。</p><p>当进程离开临界区段时，需要执行V（<code>signal()</code>），将信号量S增加。当信号量S不为负值时，先前被挡住的其他进程，可以获准进入临界区段。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信号</tag>
      
      <tag>信号量</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识MQTT协议</title>
    <link href="/2022/02/25/20220225-getting-to-know-mqtt/"/>
    <url>/2022/02/25/20220225-getting-to-know-mqtt/</url>
    
    <content type="html"><![CDATA[<h1 id="认识MQTT协议"><a href="#认识MQTT协议" class="headerlink" title="认识MQTT协议"></a>认识MQTT协议</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着5G时代的来临，网络基础设施的信道能力不断增强，万物互联似乎成为可能，日常生活中可以见到越来越多的设备接入了互联网。可是海量的设备接入和管理对网络带宽、通信协议以及平台服务架构都带来了很大的挑战。</p><p>传统Web领域的通信协议http不再适用于物联网设备，MQTT协议应运而起，凭借简单易实现、报文小、可靠稳定等特点，占领了物联网协议的半壁江山。</p><h2 id="为什么选择MQTT"><a href="#为什么选择MQTT" class="headerlink" title="为什么选择MQTT"></a>为什么选择MQTT</h2><p>主要是MQTT有着以下四个优点：</p><ul><li><p>轻量可靠</p><p>MQTT报文小，可在资源严格首先的硬件设备和低带宽、高延迟的网络上稳定传输</p></li><li><p>生态完善</p><p>协议简单易实现，有着全语言的客户端版本和众多云厂商的使用支持，已经成为了物联网的事实标准</p></li><li><p>采用发布/订阅模式</p><p>基于发布/订阅模式，可以在发布者和订阅者之间实现解耦；发布者与订阅者之间不需要建立直接连接，也不需要同时在线</p></li><li><p>为物联网而设计的众多特性</p><p>提供了心跳机制、遗嘱消息、QoS质量等级、安全管理等全面的物联网应用特性</p></li></ul><h2 id="MQTT协议是什么"><a href="#MQTT协议是什么" class="headerlink" title="MQTT协议是什么"></a>MQTT协议是什么</h2><p>MQTT全称Message Queuing Telemetry Transport，最早由IBM的Andy Stanford-Clark和Arcom的Arlen Nipper两位工程师在90年代早期开发，用于原油管道采集数据的实时传输。</p><p>一开始设计MQTT的时候，两人就制定了一些原则：必须简单容易实现，必须支持 QoS(设备网络环境复杂)，必须轻量且省带宽(因为那时候带宽很贵)，必须数据无关(不关心 Payload 数据格式)，必须有持续地会话感知能力(时刻知道设备是否在线)。MQTT 3.1.1版本的几个核心特性，就对应了这几个设计原则的实现。</p><h2 id="MQTT的几大核心特性"><a href="#MQTT的几大核心特性" class="headerlink" title="MQTT的几大核心特性"></a>MQTT的几大核心特性</h2><h3 id="灵活的发布订阅和主题设计"><a href="#灵活的发布订阅和主题设计" class="headerlink" title="灵活的发布订阅和主题设计"></a>灵活的发布订阅和主题设计</h3><p>发布订阅模式是对传统的客户端服务器模式的完全解耦。发布者（Publisher）通过 中间人（Broker） 与订阅者（Subscriber）之间通信， 中间人（Broker） 的作用是将收到的消息通过订阅者列表，正确地发送给订阅者。发布/订阅模式 相对于 客户端/服务器模式 的好处在于：</p><ul><li><p>发布者和订阅者之间不需要知道对方的通信方式，比如IP</p></li><li><p>发布者和订阅者之间不必同时运行。只要中间人（Broker） 是一直运行的，就可以完成通信。</p></li></ul><p>发布者和订阅者之间的契约是Topic，订阅者（Subscriber）只需告诉中间人（Broker），我要订阅topic是AAA的消息，发布者（Publisher）在发布topic是AAA的消息时，Broker就会把消息推送给订阅者（Subscriber</p><p>MQTT 的 Topic 有层级结构，并且支持通配符 <code>+</code> 和 <code>#</code>:</p><ul><li><p><code>+</code> 是匹配单层的通配符。比如 terminal/+可以匹配到terminal/news</p></li><li><p><code>#</code> 是一到多层的通配符。比如 terminal/#<code>可以匹配</code>terminal<code>、 </code>terminal/news、terminal/news/1</p></li></ul><p>MQTT 的主题是不要预先创建的，发布者（Publisher）发送消息到某个主题、或者订阅者（Subscriber）订阅某个主题的时候，中间人（Broker）就会自动创建这个主题。</p><h3 id="报文轻量，对带宽要求低"><a href="#报文轻量，对带宽要求低" class="headerlink" title="报文轻量，对带宽要求低"></a>报文轻量，对带宽要求低</h3><p>MQTT 协议将协议本身占用的额外消耗最小化，消息头部最小只需要占用 2 个字节。</p><p>MQTT 的消息格式分三部分：</p><table><thead><tr><th>Fixed header</th><th>固定报头，所有控制报文都包含</th></tr></thead><tbody><tr><td>Variable header</td><td>可变报头，部分控制报文包含</td></tr><tr><td>Payload</td><td>有效载荷，部分控制报文包含</td></tr></tbody></table><p>固定报头的格式：</p><table>  <tr>      <td>Bit</td>      <td>7</td>      <td>6</td>      <td>5</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>0</td>  </tr>  <tr>      <td>byte 1</td>      <td colspan="4">MQTT控制报文的类型</td>      <td colspan="4">用于指定控制报文类型的标志位</td>  </tr>  <tr>      <td>byte 2</td>      <td colspan="8">剩余长度</td>  </tr></table><p>MQTT 的主要消息类型有：</p><table><thead><tr><th><strong>名字</strong></th><th><strong>值</strong></th><th><strong>报文流动方向</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Reserved</td><td>0</td><td>禁止</td><td>保留</td></tr><tr><td>CONNECT</td><td>1</td><td>客户端到服务端</td><td>客户端请求连接服务端</td></tr><tr><td>CONNACK</td><td>2</td><td>服务端到客户端</td><td>连接报文确认</td></tr><tr><td>PUBLISH</td><td>3</td><td>两个方向都允许</td><td>发布消息</td></tr><tr><td>PUBACK</td><td>4</td><td>两个方向都允许</td><td>QoS 1消息发布收到确认</td></tr><tr><td>PUBREC</td><td>5</td><td>两个方向都允许</td><td>发布收到（保证交付第一步）</td></tr><tr><td>PUBREL</td><td>6</td><td>两个方向都允许</td><td>发布释放（保证交付第二步）</td></tr><tr><td>PUBCOMP</td><td>7</td><td>两个方向都允许</td><td>QoS 2消息发布完成（保证交互第三步）</td></tr><tr><td>SUBSCRIBE</td><td>8</td><td>客户端到服务端</td><td>客户端订阅请求</td></tr><tr><td>SUBACK</td><td>9</td><td>服务端到客户端</td><td>订阅请求报文确认</td></tr><tr><td>UNSUBSCRIBE</td><td>10</td><td>客户端到服务端</td><td>客户端取消订阅请求</td></tr><tr><td>UNSUBACK</td><td>11</td><td>服务端到客户端</td><td>取消订阅报文确认</td></tr><tr><td>PINGREQ</td><td>12</td><td>客户端到服务端</td><td>心跳请求</td></tr><tr><td>PINGRESP</td><td>13</td><td>服务端到客户端</td><td>心跳响应</td></tr><tr><td>DISCONNECT</td><td>14</td><td>客户端到服务端</td><td>客户端断开连接</td></tr><tr><td>Reserved</td><td>15</td><td>禁止</td><td>保留</td></tr></tbody></table><p>其中 PINGREQ / PINGRESP 和 DISCONNECT 报文是不需要可变头部的，也没有 Payload，也就是说它们的报文大小仅仅消耗 2 个字节。</p><p>在 CONNECT 报文的可变长度头部里，有个 Protocol Version 的字段。为了节省空间，只有一个字节。所以版本号不是按照字符串 “3.1.1” 存放的，而是使用数字 4 来表示 3.1.1 版本。</p><h3 id="可选的-QoS-等级"><a href="#可选的-QoS-等级" class="headerlink" title="可选的 QoS 等级"></a>可选的 QoS 等级</h3><p>为适应设备不同的网络环境，MQTT 设计了 3 个 QoS 等级，0, 1, 2:</p><ul><li><p><em>At most once</em> (0)</p></li><li><p><em>At least once</em> (1)</p></li><li><p><em>Exactly once</em> (2)</p></li></ul><p>QoS 0 是一种 “fire and forget” 的消息发送模式：Sender (可能是 Publisher 或者 Broker) 发送一条消息之后，就不再关心它有没有发送到对方，也不设置任何重发机制。</p><p>QoS 1 包含了简单的重发机制，Sender 发送消息之后等待接收者的 ACK，如果没收到 ACK 则重新发送消息。这种模式能保证消息至少能到达一次，但无法保证消息重复。</p><p>QoS 2 设计了略微复杂的重发和重复消息发现机制，保证消息到达对方并且严格只到达一次。</p><h3 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h3><p>MQTT 没有假设设备或 Broker 使用了 TCP 的保活机制，而是设计了协议层的保活机制：在 CONNECT 报文里可设置 Keepalive 字段，来设置保活心跳包 PINGREQ/PINGRESP 的发送时间间隔。当长时间无法收到设备的 PINGREQ 的时候，Broker 就会认为设备已经下线。</p><p>总的来说，Keepalive 有两个作用：</p><ul><li><p>发现对端死亡或者网络中断</p></li><li><p>在长时间无消息交互的情况下，保持连接不被网络设备断开</p></li></ul><p>对于那些想要在重新上线后，重新收到离线期间错过的消息的设备，MQTT 设计了持久化连接：在 CONNECT 报文里可设置 CleanSession 字段为 False，则 Broker 会为终端存储：</p><ul><li><p>设备所有的订阅</p></li><li><p>还未被设备确认的 QoS1 和 QoS 消息</p></li><li><p>设备离线时错过的消息</p></li></ul><h3 id="在线状态感知"><a href="#在线状态感知" class="headerlink" title="在线状态感知"></a>在线状态感知</h3><p>MQTT 设计了遗愿(Last Will) 消息，让 Broker 在发现设备异常下线的情况下，帮助设备发布一条遗愿消息到指定的主题。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>物联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五分钟理解软件架构模式</title>
    <link href="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/"/>
    <url>/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/</url>
    
    <content type="html"><![CDATA[<h1 id="译文：五分钟理解软件架构模式"><a href="#译文：五分钟理解软件架构模式" class="headerlink" title="译文：五分钟理解软件架构模式"></a>译文：五分钟理解软件架构模式</h1><p>本文是“好文快译”系列的第一篇，先来解释一下为什么想做这个系列。一是为了学习外国工程师的一些经验总结，毕竟计算机方面最新最热的资料还是英文居多；二是在翻译的过程中提高计算机领域的英文能力。纯属自我学习之作，由于英文能力有限，有看不懂的地方可以直接查看原文，提前见谅。</p><blockquote><p>原文地址：<a href="https://orkhanscience.medium.com/software-architecture-patterns-5-mins-read-e9e3c8eb47d2">https://orkhanscience.medium.com/software-architecture-patterns-5-mins-read-e9e3c8eb47d2</a></p></blockquote><p>当一个人进入软件工程师的世界，总有一天他需要知道基本的软件架构模式。当我在编程方面还是个新人的时候，我不知道从哪里获取介绍现有软件架构的资源。它可以是不详细且不复杂，但又非常抽象简洁容易理解。</p><p>这对我来说一直是个问题，直到我发现了Mark Richards的《软件架构模式》一书。现在我想与你分享这本书中最重要的一些部分和架构模式。(如需更多信息，我强烈建议你阅读该书或他的博文）。</p><h2 id="作为软件工程师，为什么你至少要学习基本软件架构"><a href="#作为软件工程师，为什么你至少要学习基本软件架构" class="headerlink" title="作为软件工程师，为什么你至少要学习基本软件架构"></a>作为软件工程师，为什么你至少要学习基本软件架构</h2><p>我相信已经有非常多的文章回答了这个问题，但是我还是会给出几个理由让你来思考。首先，如果你了解软件架构的基本知识，那么你会更容易遵循架构师提出的需求。第二个原因是，了解这些模式可以帮助你在写代码时做出决策。举个例子：如果你的应用是基于事件驱动的微服务，作为软件工程师当你注意到现有服务中的逻辑复杂性和职责增加时，你必须把你的代码解耦到一个独立的服务中。（如果你不理解这部分，就继续读下面的内容，文中对这个模式进行了简要说明）</p><p>Mark Richards的书中描述了5种模式：</p><ul><li>分层架构</li><li>事件驱动架构</li><li>微内核架构（或插件架构）</li><li>微服务架构</li><li>基于空间的架构（或云架构）</li></ul><h2 id="1-分层架构"><a href="#1-分层架构" class="headerlink" title="1.分层架构"></a>1.分层架构</h2><p>分层架构是单体应用中最常用的架构模式。该模式的基本思想是将应用程序的逻辑划分为若干层，每层都封装了特定的职责。例如，持久化层负责你的应用程序与数据库引擎之间的通信。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/layer.png" alt="layer"></p><h2 id="2-事件驱动架构"><a href="#2-事件驱动架构" class="headerlink" title="2.事件驱动架构"></a>2.事件驱动架构</h2><p>该架构模型的主要思想是将应用程序的逻辑解耦到单一用途的的事件处理组件中，这些组件异步地接收和处理事件。该架构是流行的分布式异步架构之一，以高扩展性和适应性闻名。s</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/event.png" alt="event"></p><h2 id="3-微内核架构"><a href="#3-微内核架构" class="headerlink" title="3.微内核架构"></a>3.微内核架构</h2><p>微内核架构，也叫做插件架构，是有两个主要组成部分的设计模式：一个内核系统和插件模块（或扩展）。一个很好的例子是浏览器（内核系统）中你可以安装无尽的扩展（或插件）。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/core.png" alt="core"></p><h2 id="4-微服务架构"><a href="#4-微服务架构" class="headerlink" title="4.微服务架构"></a>4.微服务架构</h2><p>微服务架构由独立部署的服务组成，每个服务有着理想的单一职责。这些服务是相互独立的，如果一个服务出现故障，其他服务不会停止运行。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/microservice.png" alt="microservice"></p><h2 id="5-基于空间的架构"><a href="#5-基于空间的架构" class="headerlink" title="5.基于空间的架构"></a>5.基于空间的架构</h2><p>基于空间的模式背后的主要想法是分布式共享内存，以缓解经常发生在数据库层面的问题。其假设是，通过使用内存数据处理大部分操作，我们可以避免在数据库中进行额外的操作，从而避免将来可能出现的任何问题（例如，如果你的用户活动数据实体发生了变化，你不需要改变一堆代码来持久化并从数据库中检索该数据）。</p><p>基本方法是将应用程序分成处理单元（可以根据需求自动扩大和缩小），数据将在这些单元之间进行复制和处理，而不需要在中央数据库中进行任何持久化处理（尽管在系统故障的情况下会有本地存储）。</p><p><img src="/2022/01/18/20220209-five-minutes-to-understand-software-architecture-patterns/cloud.png" alt="cloud"></p>]]></content>
    
    
    <categories>
      
      <category>好文快译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法整理</title>
    <link href="/2022/01/09/20220207-sorting-algorithm/"/>
    <url>/2022/01/09/20220207-sorting-algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>冒泡排序是入门级的排序算法，其思想就是一边比较挨着的两个位置元素的大小一边两两交换，每次都会将最大值冒泡到最后一位。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(num)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span> - i; j++ &#123;<br>            <span class="hljs-keyword">if</span> num[j] &gt; num[j+<span class="hljs-number">1</span>] &#123;<br>                num[j], num[j+<span class="hljs-number">1</span>] = num[j+<span class="hljs-number">1</span>], num[j]<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>因为冒泡排序直接在要排序的数组上交换，空间复杂度为O(1)。最坏情况下每次比较都会发生交换，时间复杂度为O(n^2)。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>选择排序的思想是：循环数组找到最小值所在的下标，将其交换到首位，然后从第二位开始找剩下元素中的最小值，以此类推处理所有元素。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(num) <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        minPos := i<br>        <span class="hljs-keyword">for</span> j := i+<span class="hljs-number">1</span>; j &lt; n ; j++ &#123;<br>            <span class="hljs-keyword">if</span> num[j] &lt; num[minPos] &#123;<br>                minPos = j<br>            &#125;<br>        &#125;<br>        num[i], num[minPos] = num[minPos], num[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>与冒泡排序相似的是：选择排序也只使用了一个变量来存储最小值下标，因此它的空间复杂度也为O(1)；同样，最坏情况下，需要完整的双重循环将最小值找出，时间复杂度为O(n^2)。<br>但是他们的不同点在于冒泡排序是稳定的，而选择排序在最小值与首位交换的过程中，可能破坏了相同大小元素的顺序，因此选择排序是不稳定的。比如对数组[3,3,1]做升序排序时，把最小值1和首位的3做了交换，就打乱了首位的3与第二位的3的顺序。</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="思想-2"><a href="#思想-2" class="headerlink" title="思想"></a>思想</h3><p>插入排序的思想很简单，就是拿新的元素在已经排好序的数组中找到合适的位置插入进去。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(num)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; n; i++ &#123;<br>        curVal := num[i]<br>        j := i<span class="hljs-number">-1</span><br>        <span class="hljs-keyword">for</span> j &gt;= <span class="hljs-number">0</span> &amp;&amp; num[j] &gt; curVal &#123;<br>            num[j+<span class="hljs-number">1</span>] = num[j]<br>            j--<br>        &#125;<br>        num[j+<span class="hljs-number">1</span>] = curVal<br>    &#125;<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>插入排序同样使用常数级的空间，空间复杂度为O(1)。时间复杂度O(n^2)。插入排序是稳定的排序算法。</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="思想-3"><a href="#思想-3" class="headerlink" title="思想"></a>思想</h3><p>希尔排序由美国数学鄙视Donaid Shell在1959年提出，成为首批将时间复杂度降到O(n^2)以下的算法。<br>希尔算法本质上是对插入排序的一种优化，它的基本思想是：</p><ul><li>将待排序的数组按照一定的间隔分为多个子数组，每组分别进行插入排序。这里按照间隔分组指的不是连续的一段子数组，而是每跳跃一定间隔取一个值组成一组，有点像军训时的报数分组。</li><li>逐渐缩小间隔进行下一轮的排序</li><li>最后一轮时，间隔为1，相当于插入排序。但这时数组已基本有序，所以只需进行少量的交换便可完成。</li></ul><p>希尔排序虽然最终逐渐被快速排序所淘汰，但是它的思想启发出了之后一系列的O(n^2)级以下的排序算法。</p><p>希尔排序为什么能将时间复杂度降低到O(n^2)以下呢？</p><blockquote><p>当我们进行排序时，如果数组中两个数字，前面的数字比后面的数字大，那这两个数组组成一个逆序对。</p><p>排序本质上就是消除逆序对的过程。</p></blockquote><p>对于随机数组，逆序对的数量是 O(n^2) 级的，如果采用“交换相邻元素”的办法来消除逆序对，每次最多只能消除一组逆序对，因此必须执行 O(n^2)级的交换次数，这就是为什么冒泡、插入、选择算法只能到 O(n^2)级的原因。反过来说，基于交换元素的排序算法要想突破 O(n^2)级，必须通过一些比较，交换间隔比较远的元素，使得一次交换能消除一个以上的逆序对。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><br></code></pre></td></tr></table></figure><h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>希尔排序时间复杂度非常难以分析，它的平均复杂度界于 O(n) 和 O(n^2)之间，普遍认为它最好的时间复杂度为 O(n^1.3)。</p><p>希尔排序的空间复杂度为 O(1)，只需要常数级的临时变量。</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="思想-4"><a href="#思想-4" class="headerlink" title="思想"></a>思想</h3><p>介绍堆排序之前我们先给出堆的定义：</p><blockquote><p>堆是一棵完全二叉树。<br>堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆，根节点最小的堆叫做最小堆。</p></blockquote><p>堆排序的思想如下：</p><ul><li>用数组构建成最大堆</li><li>取出根节点的数字，将剩余节点重新构建最大堆，再次取出根节点</li><li>循环往复直至整个堆为空</li></ul><p>堆排序有两个关键的方法，初始化最大堆和调整堆。实现了这两个方法也就基本实现了堆排序。</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MaxHeap <span class="hljs-keyword">struct</span> &#123;<br>    num []<span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    maxHeap := initMaxHeap(num)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(num)<span class="hljs-number">-1</span>; i &gt; <span class="hljs-number">0</span>; i-- &#123;<br>        maxHeap.num[i], maxHeap.num[<span class="hljs-number">0</span>] = maxHeap.num[<span class="hljs-number">0</span>], maxHeap.num[i]<br>        maxHeap.heapifyHeap(<span class="hljs-number">0</span>, i)<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxHeap.num<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMaxHeap</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">MaxHeap</span></span> &#123;<br>    m := MaxHeap&#123;&#125;<br>    m.num = num<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(num)/<span class="hljs-number">2</span><span class="hljs-number">-1</span>; i &gt;=<span class="hljs-number">0</span>; i-- &#123;<br>        m.heapifyHeap(i, <span class="hljs-built_in">len</span>(num))<br>    &#125;<br><span class="hljs-keyword">return</span> m<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *MaxHeap)</span> <span class="hljs-title">heapifyHeap</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>, size <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    maxPos := i<br>    <span class="hljs-keyword">if</span> i*<span class="hljs-number">2</span> &lt; size &amp;&amp; m.num[maxPos] &lt; m.num[i*<span class="hljs-number">2</span>] &#123;<br>        maxPos = i*<span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span> &lt; size &amp;&amp; m.num[maxPos] &lt; m.num[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] &#123;<br>        maxPos = i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> maxPos != i &#123;<br>        m.num[i], m.num[maxPos] = m.num[maxPos], m.num[i]<br>        m.heapifyHeap(maxPos, size)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h3><p>堆排序总的时间复杂度为 O(nlogn), 空间复杂度为 O(1)</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="思想-5"><a href="#思想-5" class="headerlink" title="思想"></a>思想</h3><p>快速排序在大多数情况下比其他几种排序方法效率更高，所以非常受大家欢迎。</p><p>快速排序使用了分治的思想：</p><ul><li>从数组中选取一个数字</li><li>遍历数组，将比选取的数字小的放在它的左边，比选取的数字大的放在它的右边</li><li>以选取数字分割成左右两个数组，递归进行上面的操作<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Array []<span class="hljs-keyword">int</span> <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(num Array)</span> <span class="hljs-title">subQuickSort</span><span class="hljs-params">(start <span class="hljs-keyword">int</span>, end <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> start &gt;= end &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125; <br>    splitPos := start<br>    <span class="hljs-keyword">for</span> i := start+<span class="hljs-number">1</span>; i&lt;= end; i++ &#123;<br>       <span class="hljs-keyword">if</span> num[i] &lt;= num[start] &#123;<br>           splitPos++<br>           num[i], num[splitPos] = num[splitPos], num[i]<br>       &#125;<br>    &#125;<br>    num[start], num[splitPos] = num[splitPos], num[start]<br>    num.subQuickSort(start, splitPos<span class="hljs-number">-1</span>)<br>    num.subQuickSort(splitPos+<span class="hljs-number">1</span>, end)<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">var</span> array Array<br>array = num<br>    array.subQuickSort(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num)<span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> array<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h3>快速排序的平均时间复杂度为 O(nlogn)，最坏的时间复杂度为 O(n^2)，空间复杂度与递归的层数有关，每层递归会生成一些临时变量，所以空间复杂度为 O(logn) ~ O(n)，平均空间复杂度为 O(logn)<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="思想-6"><a href="#思想-6" class="headerlink" title="思想"></a>思想</h3>归并排序同样使用了分治的思想，它的主要思路是：</li><li>每次合并两个有序的数组</li><li>不断拆分，当数组中只有一个元素时，那么它是有序的<h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(num []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span>&#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> num<br>    &#125;<br>    mid := <span class="hljs-built_in">len</span>(num)/<span class="hljs-number">2</span><br>    left := mergeSort(num[:mid])<br>    right := mergeSort(num[mid:])<br>    <span class="hljs-keyword">return</span> merge(left, right)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(num1 []<span class="hljs-keyword">int</span>, num2 []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    l1 := <span class="hljs-built_in">len</span>(num1)<br>    l2 := <span class="hljs-built_in">len</span>(num2)<br>    ans := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    i1, i2 := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i1 &lt; l1 &amp;&amp; i2 &lt; l2 &#123;<br>        <span class="hljs-keyword">if</span> num1[i1] &lt; num2[i2] &#123;<br>            ans = <span class="hljs-built_in">append</span>(ans, num1[i1])<br>            i1++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ans = <span class="hljs-built_in">append</span>(ans, num2[i2])<br>            i2++<br>        &#125;<br>    &#125;<br>    ans = <span class="hljs-built_in">append</span>(ans, num1[i1:]...)<br>    ans = <span class="hljs-built_in">append</span>(ans, num2[i2:]...)<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h3><p>归并排序的复杂度比较容易分析，拆分数组的过程中，会将数组拆分 logn 次，每层执行的比较次数都约等于 n 次，所以时间复杂度是 O(nlogn)。空间复杂度是 O(n)，主要占用空间的就是我们在排序前创建的长度为 n 的 result 数组。<br>分析归并的过程可知，归并排序是一种稳定的排序算法<br>由于性能较好，且排序稳定，归并排序应用非常广泛</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
